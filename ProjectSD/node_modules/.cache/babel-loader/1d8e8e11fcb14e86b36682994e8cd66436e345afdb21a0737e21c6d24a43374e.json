{"ast":null,"code":"import { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\nconst propEventHandlers = [\"AnimationStart\", \"AnimationComplete\", \"Update\", \"BeforeLayoutMeasure\", \"LayoutMeasure\", \"LayoutAnimationStart\", \"LayoutAnimationComplete\"];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n  /**\n   * This method takes React props and returns found MotionValues. For example, HTML\n   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n   *\n   * This isn't an abstract method as it needs calling in the constructor, but it is\n   * intended to be one.\n   */\n  scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n    return {};\n  }\n  constructor({\n    parent,\n    props,\n    presenceContext,\n    reducedMotionConfig,\n    blockInitialAnimation,\n    visualState\n  }, options = {}) {\n    /**\n     * If true, will-change will be applied to the element. Only HTMLVisualElements\n     * currently support this.\n     */\n    this.applyWillChange = false;\n    /**\n     * A reference to the current underlying Instance, e.g. a HTMLElement\n     * or Three.Mesh etc.\n     */\n    this.current = null;\n    /**\n     * A set containing references to this VisualElement's children.\n     */\n    this.children = new Set();\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n    this.isVariantNode = false;\n    this.isControllingVariants = false;\n    /**\n     * Decides whether this VisualElement should animate in reduced motion\n     * mode.\n     *\n     * TODO: This is currently set on every individual VisualElement but feels\n     * like it could be set globally.\n     */\n    this.shouldReduceMotion = null;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n    this.values = new Map();\n    this.KeyframeResolver = KeyframeResolver;\n    /**\n     * Cleanup functions for active features (hover/tap/exit etc)\n     */\n    this.features = {};\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n    this.valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n    this.prevMotionValues = {};\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n    this.events = {};\n    /**\n     * An object containing an unsubscribe function for each prop event subscription.\n     * For example, every \"Update\" event can have multiple subscribers via\n     * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n     */\n    this.propEventSubscriptions = {};\n    this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n    this.render = () => {\n      if (!this.current) return;\n      this.triggerBuild();\n      this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n    };\n    this.renderScheduledAt = 0.0;\n    this.scheduleRender = () => {\n      const now = time.now();\n      if (this.renderScheduledAt < now) {\n        this.renderScheduledAt = now;\n        frame.render(this.render, false, true);\n      }\n    };\n    const {\n      latestValues,\n      renderState\n    } = visualState;\n    this.latestValues = latestValues;\n    this.baseTarget = {\n      ...latestValues\n    };\n    this.initialValues = props.initial ? {\n      ...latestValues\n    } : {};\n    this.renderState = renderState;\n    this.parent = parent;\n    this.props = props;\n    this.presenceContext = presenceContext;\n    this.depth = parent ? parent.depth + 1 : 0;\n    this.reducedMotionConfig = reducedMotionConfig;\n    this.options = options;\n    this.blockInitialAnimation = Boolean(blockInitialAnimation);\n    this.isControllingVariants = isControllingVariants(props);\n    this.isVariantNode = isVariantNode(props);\n    if (this.isVariantNode) {\n      this.variantChildren = new Set();\n    }\n    this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't necessarily a breaking change,\n     * more a reflection of the test.\n     */\n    const {\n      willChange,\n      ...initialMotionValues\n    } = this.scrapeMotionValuesFromProps(props, {}, this);\n    for (const key in initialMotionValues) {\n      const value = initialMotionValues[key];\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n      }\n    }\n  }\n  mount(instance) {\n    this.current = instance;\n    visualElementStore.set(instance, this);\n    if (this.projection && !this.projection.instance) {\n      this.projection.mount(instance);\n    }\n    if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n      this.removeFromVariantTree = this.parent.addVariantChild(this);\n    }\n    this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n    if (!hasReducedMotionListener.current) {\n      initPrefersReducedMotion();\n    }\n    this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n    if (process.env.NODE_ENV !== \"production\") {\n      warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n    }\n    if (this.parent) this.parent.children.add(this);\n    this.update(this.props, this.presenceContext);\n  }\n  unmount() {\n    visualElementStore.delete(this.current);\n    this.projection && this.projection.unmount();\n    cancelFrame(this.notifyUpdate);\n    cancelFrame(this.render);\n    this.valueSubscriptions.forEach(remove => remove());\n    this.valueSubscriptions.clear();\n    this.removeFromVariantTree && this.removeFromVariantTree();\n    this.parent && this.parent.children.delete(this);\n    for (const key in this.events) {\n      this.events[key].clear();\n    }\n    for (const key in this.features) {\n      const feature = this.features[key];\n      if (feature) {\n        feature.unmount();\n        feature.isMounted = false;\n      }\n    }\n    this.current = null;\n  }\n  bindToMotionValue(key, value) {\n    if (this.valueSubscriptions.has(key)) {\n      this.valueSubscriptions.get(key)();\n    }\n    const valueIsTransform = transformProps.has(key);\n    const removeOnChange = value.on(\"change\", latestValue => {\n      this.latestValues[key] = latestValue;\n      this.props.onUpdate && frame.preRender(this.notifyUpdate);\n      if (valueIsTransform && this.projection) {\n        this.projection.isTransformDirty = true;\n      }\n    });\n    const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n    let removeSyncCheck;\n    if (window.MotionCheckAppearSync) {\n      removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n    }\n    this.valueSubscriptions.set(key, () => {\n      removeOnChange();\n      removeOnRenderRequest();\n      if (removeSyncCheck) removeSyncCheck();\n      if (value.owner) value.stop();\n    });\n  }\n  sortNodePosition(other) {\n    /**\n     * If these nodes aren't even of the same type we can't compare their depth.\n     */\n    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {\n      return 0;\n    }\n    return this.sortInstanceNodePosition(this.current, other.current);\n  }\n  updateFeatures() {\n    let key = \"animation\";\n    for (key in featureDefinitions) {\n      const featureDefinition = featureDefinitions[key];\n      if (!featureDefinition) continue;\n      const {\n        isEnabled,\n        Feature: FeatureConstructor\n      } = featureDefinition;\n      /**\n       * If this feature is enabled but not active, make a new instance.\n       */\n      if (!this.features[key] && FeatureConstructor && isEnabled(this.props)) {\n        this.features[key] = new FeatureConstructor(this);\n      }\n      /**\n       * If we have a feature, mount or update it.\n       */\n      if (this.features[key]) {\n        const feature = this.features[key];\n        if (feature.isMounted) {\n          feature.update();\n        } else {\n          feature.mount();\n          feature.isMounted = true;\n        }\n      }\n    }\n  }\n  triggerBuild() {\n    this.build(this.renderState, this.latestValues, this.props);\n  }\n  /**\n   * Measure the current viewport box with or without transforms.\n   * Only measures axis-aligned boxes, rotate and skew must be manually\n   * removed with a re-render to work.\n   */\n  measureViewportBox() {\n    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n  }\n  getStaticValue(key) {\n    return this.latestValues[key];\n  }\n  setStaticValue(key, value) {\n    this.latestValues[key] = value;\n  }\n  /**\n   * Update the provided props. Ensure any newly-added motion values are\n   * added to our map, old ones removed, and listeners updated.\n   */\n  update(props, presenceContext) {\n    if (props.transformTemplate || this.props.transformTemplate) {\n      this.scheduleRender();\n    }\n    this.prevProps = this.props;\n    this.props = props;\n    this.prevPresenceContext = this.presenceContext;\n    this.presenceContext = presenceContext;\n    /**\n     * Update prop event handlers ie onAnimationStart, onAnimationComplete\n     */\n    for (let i = 0; i < propEventHandlers.length; i++) {\n      const key = propEventHandlers[i];\n      if (this.propEventSubscriptions[key]) {\n        this.propEventSubscriptions[key]();\n        delete this.propEventSubscriptions[key];\n      }\n      const listenerName = \"on\" + key;\n      const listener = props[listenerName];\n      if (listener) {\n        this.propEventSubscriptions[key] = this.on(key, listener);\n      }\n    }\n    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n    if (this.handleChildMotionValue) {\n      this.handleChildMotionValue();\n    }\n  }\n  getProps() {\n    return this.props;\n  }\n  /**\n   * Returns the variant definition with a given name.\n   */\n  getVariant(name) {\n    return this.props.variants ? this.props.variants[name] : undefined;\n  }\n  /**\n   * Returns the defined default transition on this component.\n   */\n  getDefaultTransition() {\n    return this.props.transition;\n  }\n  getTransformPagePoint() {\n    return this.props.transformPagePoint;\n  }\n  getClosestVariantNode() {\n    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : undefined;\n  }\n  /**\n   * Add a child visual element to our set of children.\n   */\n  addVariantChild(child) {\n    const closestVariantNode = this.getClosestVariantNode();\n    if (closestVariantNode) {\n      closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);\n      return () => closestVariantNode.variantChildren.delete(child);\n    }\n  }\n  /**\n   * Add a motion value and bind it to this visual element.\n   */\n  addValue(key, value) {\n    // Remove existing value if it exists\n    const existingValue = this.values.get(key);\n    if (value !== existingValue) {\n      if (existingValue) this.removeValue(key);\n      this.bindToMotionValue(key, value);\n      this.values.set(key, value);\n      this.latestValues[key] = value.get();\n    }\n  }\n  /**\n   * Remove a motion value and unbind any active subscriptions.\n   */\n  removeValue(key) {\n    this.values.delete(key);\n    const unsubscribe = this.valueSubscriptions.get(key);\n    if (unsubscribe) {\n      unsubscribe();\n      this.valueSubscriptions.delete(key);\n    }\n    delete this.latestValues[key];\n    this.removeValueFromRenderState(key, this.renderState);\n  }\n  /**\n   * Check whether we have a motion value for this key\n   */\n  hasValue(key) {\n    return this.values.has(key);\n  }\n  getValue(key, defaultValue) {\n    if (this.props.values && this.props.values[key]) {\n      return this.props.values[key];\n    }\n    let value = this.values.get(key);\n    if (value === undefined && defaultValue !== undefined) {\n      value = motionValue(defaultValue === null ? undefined : defaultValue, {\n        owner: this\n      });\n      this.addValue(key, value);\n    }\n    return value;\n  }\n  /**\n   * If we're trying to animate to a previously unencountered value,\n   * we need to check for it in our state and as a last resort read it\n   * directly from the instance (which might have performance implications).\n   */\n  readValue(key, target) {\n    var _a;\n    let value = this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n    if (value !== undefined && value !== null) {\n      if (typeof value === \"string\" && (isNumericalString(value) || isZeroValueString(value))) {\n        // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n        value = parseFloat(value);\n      } else if (!findValueType(value) && complex.test(target)) {\n        value = getAnimatableNone(key, target);\n      }\n      this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n    }\n    return isMotionValue(value) ? value.get() : value;\n  }\n  /**\n   * Set the base target to later animate back to. This is currently\n   * only hydrated on creation and when we first read a value.\n   */\n  setBaseTarget(key, value) {\n    this.baseTarget[key] = value;\n  }\n  /**\n   * Find the base target for a value thats been removed from all animation\n   * props.\n   */\n  getBaseTarget(key) {\n    var _a;\n    const {\n      initial\n    } = this.props;\n    let valueFromInitial;\n    if (typeof initial === \"string\" || typeof initial === \"object\") {\n      const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n      if (variant) {\n        valueFromInitial = variant[key];\n      }\n    }\n    /**\n     * If this value still exists in the current initial variant, read that.\n     */\n    if (initial && valueFromInitial !== undefined) {\n      return valueFromInitial;\n    }\n    /**\n     * Alternatively, if this VisualElement config has defined a getBaseTarget\n     * so we can read the value from an alternative source, try that.\n     */\n    const target = this.getBaseTargetFromProps(this.props, key);\n    if (target !== undefined && !isMotionValue(target)) return target;\n    /**\n     * If the value was initially defined on initial, but it doesn't any more,\n     * return undefined. Otherwise return the value as initially read from the DOM.\n     */\n    return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n  }\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = new SubscriptionManager();\n    }\n    return this.events[eventName].add(callback);\n  }\n  notify(eventName, ...args) {\n    if (this.events[eventName]) {\n      this.events[eventName].notify(...args);\n    }\n  }\n}\nexport { VisualElement };","map":{"version":3,"names":["initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","SubscriptionManager","motionValue","isMotionValue","transformProps","isControllingVariants","isVariantNode","updateMotionValuesFromProps","resolveVariantFromProps","warnOnce","featureDefinitions","visualElementStore","KeyframeResolver","isNumericalString","isZeroValueString","findValueType","complex","getAnimatableNone","createBox","time","frame","cancelFrame","propEventHandlers","VisualElement","scrapeMotionValuesFromProps","_props","_prevProps","_visualElement","constructor","parent","props","presenceContext","reducedMotionConfig","blockInitialAnimation","visualState","options","applyWillChange","current","children","Set","shouldReduceMotion","values","Map","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","latestValues","render","triggerBuild","renderInstance","renderState","style","projection","renderScheduledAt","scheduleRender","now","baseTarget","initialValues","initial","depth","Boolean","variantChildren","manuallyAnimateOnMount","willChange","initialMotionValues","key","value","undefined","set","mount","instance","removeFromVariantTree","addVariantChild","forEach","bindToMotionValue","process","env","NODE_ENV","add","update","unmount","delete","remove","clear","feature","isMounted","has","get","valueIsTransform","removeOnChange","on","latestValue","onUpdate","preRender","isTransformDirty","removeOnRenderRequest","removeSyncCheck","window","MotionCheckAppearSync","owner","stop","sortNodePosition","other","sortInstanceNodePosition","type","updateFeatures","featureDefinition","isEnabled","Feature","FeatureConstructor","build","measureViewportBox","measureInstanceViewportBox","getStaticValue","setStaticValue","transformTemplate","prevProps","prevPresenceContext","i","length","listenerName","listener","handleChildMotionValue","getProps","getVariant","name","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getClosestVariantNode","child","closestVariantNode","addValue","existingValue","removeValue","unsubscribe","removeValueFromRenderState","hasValue","getValue","defaultValue","readValue","target","_a","getBaseTargetFromProps","readValueFromInstance","parseFloat","test","setBaseTarget","getBaseTarget","valueFromInitial","variant","custom","eventName","callback","args"],"sources":["C:/Users/Agasthya Samyak Jnan/ProjectSD/node_modules/framer-motion/dist/es/render/VisualElement.mjs"],"sourcesContent":["import { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        /**\n         * If true, will-change will be applied to the element. Only HTMLVisualElements\n         * currently support this.\n         */\n        this.applyWillChange = false;\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.renderScheduledAt = 0.0;\n        this.scheduleRender = () => {\n            const now = time.now();\n            if (this.renderScheduledAt < now) {\n                this.renderScheduledAt = now;\n                frame.render(this.render, false, true);\n            }\n        };\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't necessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.valueSubscriptions.clear();\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature) {\n                feature.unmount();\n                feature.isMounted = false;\n            }\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        if (this.valueSubscriptions.has(key)) {\n            this.valueSubscriptions.get(key)();\n        }\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        let removeSyncCheck;\n        if (window.MotionCheckAppearSync) {\n            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n        }\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (removeSyncCheck)\n                removeSyncCheck();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    updateFeatures() {\n        let key = \"animation\";\n        for (key in featureDefinitions) {\n            const featureDefinition = featureDefinitions[key];\n            if (!featureDefinition)\n                continue;\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\n            /**\n             * If this feature is enabled but not active, make a new instance.\n             */\n            if (!this.features[key] &&\n                FeatureConstructor &&\n                isEnabled(this.props)) {\n                this.features[key] = new FeatureConstructor(this);\n            }\n            /**\n             * If we have a feature, mount or update it.\n             */\n            if (this.features[key]) {\n                const feature = this.features[key];\n                if (feature.isMounted) {\n                    feature.update();\n                }\n                else {\n                    feature.mount();\n                    feature.isMounted = true;\n                }\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        var _a;\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}