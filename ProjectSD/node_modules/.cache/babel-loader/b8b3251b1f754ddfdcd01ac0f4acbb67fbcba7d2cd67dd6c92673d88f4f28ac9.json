{"ast":null,"code":"import { progress } from '../../../../utils/progress.mjs';\n\n// Create a linear easing point for every 10 ms\nconst resolution = 10;\nconst generateLinearEasing = (easing, duration // as milliseconds\n) => {\n  let points = \"\";\n  const numPoints = Math.max(Math.round(duration / resolution), 2);\n  for (let i = 0; i < numPoints; i++) {\n    points += easing(progress(0, numPoints - 1, i)) + \", \";\n  }\n  return `linear(${points.substring(0, points.length - 2)})`;\n};\nexport { generateLinearEasing };","map":{"version":3,"names":["progress","resolution","generateLinearEasing","easing","duration","points","numPoints","Math","max","round","i","substring","length"],"sources":["C:/Users/Agasthya Samyak Jnan/ProjectSD/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/linear.mjs"],"sourcesContent":["import { progress } from '../../../../utils/progress.mjs';\n\n// Create a linear easing point for every 10 ms\nconst resolution = 10;\nconst generateLinearEasing = (easing, duration // as milliseconds\n) => {\n    let points = \"\";\n    const numPoints = Math.max(Math.round(duration / resolution), 2);\n    for (let i = 0; i < numPoints; i++) {\n        points += easing(progress(0, numPoints - 1, i)) + \", \";\n    }\n    return `linear(${points.substring(0, points.length - 2)})`;\n};\n\nexport { generateLinearEasing };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,gCAAgC;;AAEzD;AACA,MAAMC,UAAU,GAAG,EAAE;AACrB,MAAMC,oBAAoB,GAAGA,CAACC,MAAM,EAAEC,QAAQ,CAAC;AAAA,KAC1C;EACD,IAAIC,MAAM,GAAG,EAAE;EACf,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,KAAK,CAACL,QAAQ,GAAGH,UAAU,CAAC,EAAE,CAAC,CAAC;EAChE,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,SAAS,EAAEI,CAAC,EAAE,EAAE;IAChCL,MAAM,IAAIF,MAAM,CAACH,QAAQ,CAAC,CAAC,EAAEM,SAAS,GAAG,CAAC,EAAEI,CAAC,CAAC,CAAC,GAAG,IAAI;EAC1D;EACA,OAAO,UAAUL,MAAM,CAACM,SAAS,CAAC,CAAC,EAAEN,MAAM,CAACO,MAAM,GAAG,CAAC,CAAC,GAAG;AAC9D,CAAC;AAED,SAASV,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}